Seguir la doc de nativewind pero cuidado al instarla, quitar el react-native-reanimated y react-native-safe-area-context porque ya viene instalado

  npm install nativewind
  npm install -D tailwindcss@^3.4.17 prettier-plugin-tailwindcss@^0.5.11

Si te borra el package.json, solo restauralo, borrar node_modules y el lock.json y hacer un npm i, si te da errores, cierra el proyecto u volver a abrir
Crear el metro.config.js con el sigt comando: npx expo customize metro.config.js
Crear el tailwind.config.js con el comando: npx tailwindcss init y colocar dentro lo sigt:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}",
    "./presentation/**/*.{js,jsx,ts,tsx}",
  ],
  presets: [require("nativewind/preset")],
  theme: {
    extend: {
      fontFamily: {
        'work-black': ['WorkSans-Black', 'sans-serif'],
        'work-light': ['WorkSans-Light', 'sans-serif'],
        'work-medium': ['WorkSans-Medium', 'sans-serif'],
      }
    },
  },
  plugins: [],
}

El nativewind-env.d.ts ya se crea automáticamente, asegurarse de colocar lo sigt dentro:
/// <reference types="nativewind/types" />

// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind.

En mi caso el babel.config.js no vino, lo cree manualmente y puse lo sigt dentro:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: [
      ["babel-preset-expo", { jsxImportSource: "nativewind" }],
      "nativewind/babel",
    ],
  };
};

En el tsconfig.json debe estar algo así:
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts",
    "nativewind-env.d.ts"
  ]
}



Pero igual seguir la doc, con expo +50

***********************************
FORMAS DE USAR FUENTES (Antes tenemos que cargarlas en tailwind.config.ts(como arriba) y configurarlas en el RootLayout)

        <Text className="text-5xl " style={{ fontFamily: "WorkSans-Black" }}>
          Hola mundo
        </Text>
        <Text className="text-4xl font-work-black">Hola mundo</Text>
        <Text className="text-3xl font-work-medium ">Hola mundo</Text>
        <Text className="text-2xl font-work-light">Hola mundo</Text>
        <Text className="text-xl">Hola mundo</Text>

***********************************
COLORES PERSONALIZADOS Antes tenemos que cargarlas en tailwind.config.ts(como arriba)

colors:{
    primary: '#49129c',
    secondary:{
        DEFAULT: '#B40086',
        100: '#C51297',
        200: '#831266',
    },
    tertiary: '#EF2967'
},

Luego lo usuamos

<Text className="text-4xl font-work-black text-primary"> Hola mundo</Text>
<Text className="text-xl text-tertiary">Hola mundo</Text>
<Text className="text-2xl text-secondary font-work-light">
<View className="mt-6 mx-2.5 bg-primary"></View>

**********************************************

NAVEGACIÓN ENTRE PANTALLAS MEDIANTE UN BOTON COMO SI FUERA UN LINK

ESTO DARÁ UN WARNING POR FORWARDREF, QUE SE SOLUCIONA MÁS ABAJO

<Link className="mb-5" href="/products" asChild>
  <CustomButton color="primary">Productos</CustomButton>
</Link>

FORWARDREF (pasar el forwardRef a nuestro componente, en este caso al CustomButton)

const CustomButton = React.forwardRef(
  (
    { children, color = "primary", onPress, onLongPress }: Props,
    ref: React.Ref<View>
  ) => {
    const btnColor = {
      primary: "bg-primary",
      secondary: "bg-secondary",
      tertiary: "bg-tertiary",
    }[color];

    return (
      <Pressable
        className={`p-3 rounded-md ${btnColor} active:opacity-90`}
        onPress={onPress}
        onLongPress={onLongPress}
        ref={ref}
      >
        <Text className="text-white text-center">{children}</Text>
      </Pressable>
    );
  }
);
